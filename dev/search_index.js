var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SmoothNumbers","category":"page"},{"location":"#SmoothNumbers","page":"Home","title":"SmoothNumbers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SmoothNumbers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SmoothNumbers]","category":"page"},{"location":"#SmoothNumbers.pratt","page":"Home","title":"SmoothNumbers.pratt","text":"Computes 3-smooth numbers.\n\n\n\n\n\n","category":"function"},{"location":"#SmoothNumbers.pratt-Tuple{Integer}","page":"Home","title":"SmoothNumbers.pratt","text":"pratt(n::Integer)\n\nComputes the first n 3-smooth numbers and returns them as a Vector{Int}.\n\n\n\n\n\n","category":"method"},{"location":"#SmoothNumbers.pratt-Union{Tuple{T}, Tuple{Type{T}, Integer}} where T<:Integer","page":"Home","title":"SmoothNumbers.pratt","text":"pratt(::Type{T}, n::Integer) where T<:Integer\n\nComputes the first n 3-smooth numbers and returns them as a Vector{T}.\n\n\n\n\n\n","category":"method"},{"location":"#SmoothNumbers.smooth","page":"Home","title":"SmoothNumbers.smooth","text":"Computes smooth numbers.\n\n\n\n\n\n","category":"function"},{"location":"#SmoothNumbers.smooth-Tuple{Integer, Integer}","page":"Home","title":"SmoothNumbers.smooth","text":"smooth(k::Integer, n::Integer)\n\nComputes the first n k-smooth numbers and returns them as a Vector{typeof(k)}.\n\n\n\n\n\n","category":"method"},{"location":"#SmoothNumbers.smooth-Union{Tuple{T}, Tuple{Type{T}, Integer, Integer}} where T<:Integer","page":"Home","title":"SmoothNumbers.smooth","text":"smooth(::Type{T}, k::Integer, n::Integer) where T<:Integer\n\nComputes the first n k-smooth numbers and returns them as a Vector{T}.\n\n\n\n\n\n","category":"method"},{"location":"#SmoothNumbers.with_bases","page":"Home","title":"SmoothNumbers.with_bases","text":"Computes numbers that can be written as a product of powers of a given set of bases.\n\n\n\n\n\n","category":"function"},{"location":"#SmoothNumbers.with_bases-Union{Tuple{T}, Tuple{AbstractVector{T}, Integer}} where T<:Integer","page":"Home","title":"SmoothNumbers.with_bases","text":"with_bases(bases::AbstractVector{T}, n::Integer) where T<:Integer\n\nComputes the first n numbers that can be written as a product of powers of the bases.\n\nThe result is a Vector with the same element type as bases.\n\n\n\n\n\n","category":"method"}]
}
